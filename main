#include <stdio.h>
#include <stdlib.h>

#define MAX_NUMBER_OF_STEPS <>
#define MAX <>
#define WORDLENGTH 5

#include "stack.h"

int main()
{
	FILE *inpf;
	FILE *outf;
	char maze[MAX][MAX]
	char op[MAX_NUMBER_OF_STEPS][WORDLENGTH];
	int nl = 0; 
  	int nc = 0;
	char c;
	int numCommands = 0;

	If (outf == NULL)
	{
		printf(“ERROR:File maze.txt cannot be opened”);
		exit(1);
	}

	//puts the file into the array MAZE
    	if ((inpf = fopen ("maze.txt", "r")) == NULL)
  	{
	}
	else {
		while ((c = fgetc(inpf)) != EOF)
 		{
		 	Maze [nl][nc] = c;
		 	if (c == '\n')
 			{	
		    		nl++;
		    		nc = 0;
	 	  	}
		  	else
			{
     		  	nc++;
			}
		}
	}
	//prints out the maze
	printf ("\nStart: ------------\n");
	for (int i = 0; i < MAX; i++)
	{
		for (int j = 0; j < MAX; j++)
		{
		   printf ("%c", Maze[i][j]);
		}
	}
	printf ("\n------------\n");
	
	//psuedocode for Ant Intelligence
	//Stores ALL commands from input file into an array 'op'
	while(fscanf(inpf,"%s",op) != NULL)
	{
		numCommands++;
	}
	for (int i = 0; i < numCommands; i++)
	{
		//write into output
		fprintf(outf,"%s\n",op);
		//execute
		if (strcmp(op,"CWR()") == 1)
		{
			CWR();
		}
		if (strcmp(op,"CWL()") == 1)
		{
			CWL();
		}
		if (strcmp(op,"CWU()") == 1)
		{
			CWU();
		}
		if (strcmp(op,"CWD()") == 1)
		{
			CWD();
		}
		if (strcmp(op,"MARK()") == 1)
		{
			MARK();
		}
		if (strcmp(op,"move_F()") == 1)
		{
			move_F();
		}
		if (strcmp(op,"move_B()") == 1)
		{
			move_B();
		}
		if (strcmp(op,"move_R()") == 1)
		{
			move_R();
		}
		if (strcmp(op,"move_L()") == 1)
		{
			move_L();
		}
		if (strcmp(op,"BJPI()") == 1)
		{
			BJPI();
		}
		if (strcmp(op,"CJPI()") == 1)
		{
			CJPI();
		}
		if (strcmp(op,"backtrack()") ==1)
		{
			backtrack();
		}
		if (strcmp(op,"RPnt()") ==1)
		{
			RPnt(n,t);
		}
	}
	//prints out the maze
	printf ("\nMaze: ------------\n");
	for (int i = 0; i < MAX; i++)
	{
		for (int j = 0; j < MAX; j++)
		{
		   printf ("%c", Maze[i][j]);
		}
	}
	printf ("\n------------\n");
}//end of main file
