#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NUMBER_OF_STEPS <>
#define MAX <>
#define WORDLENGTH 5

#include "stack.h"

int main()
{
	FILE *inpf;
	FILE *outf;
	char maze[MAX][MAX]
	char op[MAX_NUMBER_OF_STEPS][WORDLENGTH];
	int para[MAX_NUMBER_OF_STEPS];
	int nl = 0; 
  	int nc = 0;
	char c;
	int numCommands = 0;
	int points = 0;

	If (outf == NULL)
	{
		printf(“ERROR:File maze.txt cannot be opened”);
		exit(1);
	}

	//puts the file into the array MAZE
    	if ((inpf = fopen ("maze.txt", "r")) == NULL)
  	{
	}
	else {
		while ((c = fgetc(inpf)) != EOF)
 		{
		 	Maze [nl][nc] = c;
		 	if (c == '\n')
 			{	
		    		nl++;
		    		nc = 0;
	 	  	}
		  	else
			{
     		  	nc++;
			}
		}
	}
	//prints out the maze
	printf ("\nStart: ------------\n");
	for (int i = 0; i < MAX; i++)
	{
		for (int j = 0; j < MAX; j++)
		{
		   printf ("%c", Maze[i][j]);
		}
	}
	printf ("\n------------\n");
	
	//psuedocode for Ant Intelligence
	//Stores ALL commands from input file into an array 'op'
	while(fscanf(inpf,"%s",op) != NULL)
	{
		numCommands++;
	}
	for (int i = 0; i < numCommands; i++)
	{
		//write into output
		fprintf(outf,"%s\n",op[i]);
		//execute
		if (strcmp(op[i],"CWR()") == 1)
		{
			CWR();
		}
		if (strcmp(op[i],"CWL()") == 1)
		{
			CWL();
		}
		if (strcmp(op[i],"CWU()") == 1)
		{
			CWU();
		}
		if (strcmp(op[i],"CWD()") == 1)
		{
			CWD();
		}
		if (strcmp(op[i],"MARK()") == 1)
		{
			MARK();
		}
		if (strcmp(op[i],"move_F()") == 1)
		{
			points += move_F();
		}
		if (strcmp(op[i],"move_B()") == 1)
		{
			points += move_B();
		}
		if (strcmp(op[i],"move_R()") == 1)
		{
			points += move_R();
		}
		if (strcmp(op[i],"move_L()") == 1)
		{
			points += move_L();
		}
		if (strcmp(op[i],"BJPI()") == 1)
		{
			points += BJPI();
		}
		if (strcmp(op[i],"CJPI()") == 1)
		{
			points += CJPI();
		}
		if (strcmp(op[i],"backtrack()") ==1)
		{
			backtrack();
		}
		if (op[i][0] == 'R')
		{
		np = 1;
		nt = 1;
		//detects integer parameters from string
			for (int j = 0; j < 9; i++)
			{
				c = op[i][j];
				if (c >= '0' && c <= '9' && np = 1)
				{
					pn = atoi(c);
					np = 0;
				}
				if (c > '0' && c <= '9' && nt = 1)
				{
					pt = atoi(c);
					nt = 0;
				}
			}
			RPnt(pn,pt);
		}
	}
	//prints out the maze
	printf ("\nMaze: ------------\n");
	for (int i = 0; i < MAX; i++)
	{
		for (int j = 0; j < MAX; j++)
		{
		   printf ("%c", Maze[i][j]);
		}
	}
	printf ("\n------------\n");
	printf ("Good Deeds Collected: %d", points);
}//end of main file
